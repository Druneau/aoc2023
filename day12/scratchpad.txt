?#?#?#?#?#?#?#? 1,3,1,6
.#.###.#.######



???????????#????#?? 2,1,11,1
##.#..###########.#
##..#.###########.#


??#?#????.?##????? 1,5,5,1
?.#?#????.?##?????
#.#####....#####.#
#.#####...#####..#
#.#####...#####.#.


????..????###? 4,2,4
####..##..####
####...##.####
####..##.####.



???.### 1,1,3               --> done
.??..??...?##. 1,1,3        --> (?? 1) + (?? 1) = 4
?#?#?#?#?#?#?#? 1,3,1,6     --> 
????.#...#... 4,1,1         --> done
????.######..#####. 1,6,5   --> ???? 1 = 4



?###???????? 3,2,1          

len=12
9x?
#=6 required
.=6 total (12-6)
#=3 missing ***
.=6 missing ***

6 ?'s are '.'s
3 ?'s are '#'s



Consume test

???#..???##??#?.#? 1,1,1,2,2,1

pass1 - removed '.'s
???#  ???##??#? #? 1,1,1,2,2,1

pass2 add '.'s when it works
??.#  ??.##.?#? #. 1,1,1,2,2,1

pass3 remove .'s again
?? #  ?? ## ?#? #  1,1,1,2,2,1

pass4 match groups???
?? 1 - 2 arrangements
#  1 - 1
?? 1 - 2 arrangements
## 2 - 1
?#? 2 -2 arrangements
#  1 - 1

total = 9 arrangements

Consume test 2

???##?#??????.#???.? 5,2,1,4,1

pass1 - remove '.'s

???##?#?????? #??? ? 5,2,1,4,1

pass2 - check if some are solved and remove them (last 4 and last 1)

???##?#?????? 5,2,1 +

pass3 - branch into two possible solutions because of the 5???

branch1
..##### ????? 5,2,1  (solve for 1 space and 2 groups = 3)

branch2
...##### ##.# 5,2,1 = +1


so 7 arrangements?

Consume test 3

##?????????????#..? 8,1,1,1

pass1 -remove '.'

##?????????????#  ? 8,1,1,1

pass2 check if some are solved (left to right?)

########.?????.#  # ,1,1,

pass3 what's left? 

         ?????      ,1,1, solve for 2 spaces and 2 groups = 6 

consume test 4

??.?#?????.??#?????? 1,3,2,2,3

pass1 - remove '.'s 

?? ?#????? ??#?????? 1,3,2,2,3

pass2 check if some are solved (left to right?)

?? 1 - 2 arrangements

   ?#????? ??#?????? 3,2,2,3

branch1...

   ### ??? ??#?????? 3,2,2,3


Dynamic Paths

Use '.'s to split into new paths to solve.

paths:

    1 - all '?????'s with a number of groups.  Use triangulation sequence to calculate arrangements

    2 - all '###'s  with matching number.

    3 - partial '?###????' with numbers.  Branch off by generating possible solutions around the '###'s

paths test 1

#....######..#####. 1,6,5

no '?'s == Solved = 1 arrangement.

paths test 2

can't split into anything.  Look at start sequence

?#?#?#?#?#?#?#? 1,3,1,6 

starts with '?#?' and 1.  '?' HAS to be a .

.#.#?#?#?#?#?#? 1,3,1,6

split and consume

   #?#?#?#?#?#?   3,1,6

starts with #, we have to fill it in from the start... no other way

   ###.#?#?#?#?   3,1,6

consume that

       #?#?#?#?     1,6 still 1 arrangement total

starts with # again

       #?#?#?#?     1,6 still 1 arrangement total

starts with # again, fill/match as required.

       #.#?#?#?     1,6 still 1 arrangement total
       # #?#?#?     1,6 still 1 arrangement total
         #?#?#?       6 still 1 arrangement total

starts with # again, fill/match with next number of springs

         ######       6 still 1 arrangement total

consume available #'s

                        still 1 arrangement total.  Never had to "Branch" or "Call" a solve on a sub piece of the line.


paths test 3

?###???????? 3,2,1

starts with ?# which means consume first ?

 ###.??????? 3,2,1  NOTE: consume the 3 #'s then one extra ? for the "." seperator.

starts with # so solve/consume directly

    .???????   2,1

all ?'s so no branching required.  Directly calculate number of arrangements through triangulation series

    ????????   2,1 -->  7x?'s  3 spaces and 2 groups.  = 10


HARD CASE leading '?'s with . or #

??????#...#

??##..????

?#??????


OTHER IDEA?  Just look at overall arrangements possible if all ????'s.
THEN adjust based on what's left?

In this example, the number of possible arrangements for each row is:

    ???.### 1,1,3 - 1 arrangement
    ??????? 1,1,3

    .??..??...?##. 1,1,3 - 4 arrangements
    .??..??...?##. 1,1,3 - 4 arrangements
    
    ?#?#?#?#?#?#?#? 1,3,1,6 - 1 arrangement
    ?#?#?#?#?#?#?#? 1,3,1,6 - 1 arrangement
    
    ????.#...#... 4,1,1 - 1 arrangement
    ????.#...#... 4,1,1 - 1 arrangement
    
    ????.######..#####. 1,6,5 - 4 arrangements
    ????.######..#####. 1,6,5 - 4 arrangements
    
    ?###???????? 3,2,1 - 10 arrangements
    ?###???????? 3,2,1 - 10 arrangements
   
   .?#????.#?????????# 3,2,3,2
    ?#????.#???????    3,2,3



    ..?##?##??????#? 7,5
    ..#######.#####. 7,5
    ...#######.##### 7,5



Try looking at possible ranges for each spring group?
    0123456789012345
    ..?##?##??????#? 7,5

   7  2,8; 3,9
   5  10,14; 11,15

   0 Overlap possible
     
    0123456789012345678
    #???????#?.??#????? 5,1,2,3,2

   5  0,4
   1  5,5; 6,6
   2  7,8; 8,9
   3  11,13; 12,14, 13,15
   2  15,16; 16,17; 17,18

   1 overlap.

    #???????#?.??#????? _,1,2,3,2
          ??#?.??#????? _,1,2,3,2
          
solve this:          
          ??#?.??#????? _,1,2,3,2

          #.##.###.##.. 
          #.##.###..##. 
          #.##.###...## 
          #.##..###.##. 
          #.##..###..## 
          #.##...###.## 
    

????????????##???. 2,2,6,1 

length  =18  total length of record
2+2+6+1 =11  sum of springs
11+(4-1)=14  account for '.'s between spring groups

strip trailing '.' doesn't help us
????????????##??? 2,2,6,1 

length  =17  total length of record
2+2+6+1 =11  sum of springs
11+(4-1)=14  account for '.'s between spring groups

split into groups starting from the left

????????????##??? 2,2,6,1 
-------------------------
                Possible?       Left    Right

?/???????????##??? /2,2,6,1     false   true
??/??????????##??? 2/,2,6,1     true    true 
???/?????????##??? 2/,2,6,1     true    true
????/????????##??? 2/,2,6,1     true    true
?????/???????##??? 2,2/,6,1     true    true
??????/??????##??? 2,2/,6,1     true    true
???????/?????##??? 2,2/,6,1     true    true
????????/????##??? 2,2/,6,1     true    true
?????????/???##??? 2,2/,6,1     true    true
??????????/??##??? 2,2/,6,1     true    false
???????????/?##??? 2,2/,6,1     
????????????/##??? 2,2,6/,1 
????????????#/#??? 2,2,6/,1 
????????????##/??? 2,2,6/,1 
????????????##?/?? 2,2,6/,1 
????????????##??/? 2,2,6/,1 







???##??????/./???/.            2,2,2
#???/./?????#?                4,1,2
##?#?/./?##?                  4,2
????#???????                4,1
?.?.???.??                  1,1,1
??/./????/.../??/.               1,2,1,1
???????/./?#                  2,2,1
?????????/.                  3,3
?#?#??#?#?????/./??/.          6,5,2
#???????#???#?##????        2,6,6,1
./?#?#/./#/./??#?????##          3,1,2,2,2
../?##?????##?/./??#/.          10,2
?/../?#????????????           1,6,2,1
?#?#???/./???/./?#??#??/.        2,4,1,6
???/./??????/./????/.../?/.        3,3
???#?/./???????#???           1,1,1,3,5
??###??##/./?????????/.        7,6
./????????/./??                4,1,1
#????/./?#?##??#?/.            5,8
?#??????#?/../?               4,1,1,1
??#?#????/./?##?????          1,5,5,1

1-split on '.'s
2-assign springs based on what fits 
3-solve each sub problem
   -solve by consuming
   -print out what I can't solve
4-repeat...